<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">PYNQer</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://xesscorp.github.io/pynqer/docs/_site/feed.xml" />
<link rel="alternate" type="text/html" href="https://xesscorp.github.io/pynqer/docs/_site/" />
<updated>2017-04-24T16:12:46-04:00</updated>
<id>https://xesscorp.github.io/pynqer/docs/_site/</id>
<author>
  <name>XESS Corp.</name>
  <uri>https://xesscorp.github.io/pynqer/docs/_site/</uri>
  <email>pynqer@xess.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Reading the Docs]]></title>
  <link rel="alternate" type="text/html" href="https://xesscorp.github.io/pynqer/docs/_site/blog/reading-the-docs"/>
  <id>https://xesscorp.github.io/pynqer/docs/_site/blog/reading-the-docs</id>
  <published>2017-04-22T14:04:30-04:00</published>
  <updated>2017-04-22T14:04:30-04:00</updated>
  <author>
    <name>XESS Corp.</name>
    <uri>https://xesscorp.github.io/pynqer/docs/_site</uri>
    <email>pynqer@xess.com</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;After &lt;a href=&quot;https://xesscorp.github.io/pynqer/docs/_site/blog/pynq-setup&quot;&gt;installing my PYNQ board&lt;/a&gt;,
I took a break to release an update to my
&lt;a href=&quot;https://xesscorp.github.io/skidl&quot;&gt;SKiDL circuit design language&lt;/a&gt;.
These things always take longer than you expect,
but I’m back now and my next task is to familiarize myself with the PYNQ
documentation.&lt;/p&gt;

&lt;p&gt;When you first login to the PYNQ, you’ll see the &lt;code class=&quot;highlighter-rouge&quot;&gt;getting_started&lt;/code&gt; link:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/reading-the-docs/welcome-screen.png&quot; width=&quot;800&quot; alt=&quot;Welcome screen.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on that (because that seems a natural place to start) brings up a set
of introductory Jupyter notebooks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/reading-the-docs/getting-started-screen.png&quot; width=&quot;800&quot; alt=&quot;Getting Started notebooks.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first thing you need to realize about these notebooks is &lt;em&gt;you can skip all of them!&lt;/em&gt;
If you’re like me and have to read everything out of fear you’ll miss something,
know that all this material is already available at the 
&lt;a href=&quot;https://pynq.readthedocs.io/en/latest/&quot;&gt;main PYNQ documentation site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, one advantage of having these notebooks immediately available upon setting
up the PYNQ is that you can exercise the board without having to download anything.
Here’s what the notebooks cover:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1_jupyer_notebook.ipynb&lt;/code&gt;: Explains the basics of getting around in a Jupyter
notebook.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2_programming_python.ipynb&lt;/code&gt;: Gives a &lt;em&gt;brief&lt;/em&gt; introduction to Python, but you’ll
want to take advantage of the many online Python tutorials to get a full
understanding. (This is probably a good idea, just like learning &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; was a good
idea in the 80’s.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;3_programming_onboard.ipynb&lt;/code&gt;: Let’s you play with the buttons, slide switches
and LEDs of the PYNQ. Every system has a blinky, and this one is PYNQ’s.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;4_base_overlay_iop.ipynb&lt;/code&gt;: Shows you how to access the Pmod ports to sense the
ambient light level and display it on an OLED. Of course, if you don’t have
the light sensor or OLED PMODs then this is pretty much useless.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;5_base_overlay_video.ipynb&lt;/code&gt;: Demonstrates capturing and displaying video via
the two HDMI ports on the PYNQ. There’s also a bit of image processing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;6_base_overlay_audio.ipynb&lt;/code&gt;: Like the video demo, but using the on-board
microphone (it’s actually a tiny chip on the underside of the board) and an
external speaker or headphones to record and playback sound.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Turning to the &lt;a href=&quot;https://pynq.readthedocs.io/en/latest/&quot;&gt;main PYNQ site&lt;/a&gt;, 
here are the nuggets I extracted:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;PYNQ uses the ZYNQ chips’s processing system (PS) with dual ARM processors
to run the Jupyter notebook and Python interpreter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The programmable logic (PL) section is used to host &lt;em&gt;overlays&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An overlay programs the PL to provide support for an application.
An API allows the PS to load overlays into the PL and access functions in it 
such as read and write registers.
The API is contained in a Python module and accessed with Python.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Creating an overlay is done using the Vivado FPGA programming environment and
requires logic design expertise.
To leverage this limited expertise, an overlay is typically designed with
maximum generality so it can be used in a large number of applications.
For example, the &lt;em&gt;base overlay&lt;/em&gt; provides functions for working with the Pmod
and Arduino I/O interfaces, audio I/O, HDMI I/O, and general-purpose I/O.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Arduino and Pmod connectors can interface to a wide variety of external
circuitry. In order to support this without having to redesign the logic circuitry
for each application, the base overlay uses reprogrammable I/O Processors (IOPs),
a set of peripherals (timers, SPI, I$^2$C, interrupt controllers),
and a reconfigurable switch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The IOP is programmed in C/C++ and is intended for real-time, low-level
operations. The PS is programmed with Python for higher-level, data-handling
and display operations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The base overlay uses a 32-bit, 100 MHz Microblaze for each IOP.
A 64 KB dual-port BRAM stores the program for the Microblaze.
The PS loads the program into the BRAM and starts the Microblaze.
The remainder of the BRAM can be used for local data or for passing data
back-and-forth between the PS and the IOP.
A &lt;em&gt;mailbox&lt;/em&gt; located between &lt;code class=&quot;highlighter-rouge&quot;&gt;0xF000&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0xFFFF&lt;/code&gt; in the IOP BRAM is typically
used for passing data. 
The IOP also has access to the external DDR chip on the PYNQ board, and
this can be used to transfer larger blocks of data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The reconfigurable switch in the IOP allows it to connect its various peripherals
to the physical I/O pins of the Pmod or Arduino headers.
The switch is controlled by the Microblaze.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Programs for the IOP are developed using the
&lt;a href=&quot;http://www.xilinx.com/products/design-tools/embedded-software/sdk.html&quot;&gt;Xilinx SDK&lt;/a&gt;.
&lt;a href=&quot;http://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/vivado-design-tools/2016-1.html&quot;&gt;Version 2016.1 of Vivado and the SDK&lt;/a&gt; is recommended.
(I’m currently using 2016.4, so I’ll continue with that until a problem arises.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://pynq.readthedocs.io/en/latest/11b_iop_applications.html#compiling-projects&quot;&gt;Building an application for an IOP&lt;/a&gt;
requires:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;A &lt;em&gt;hardware description file&lt;/em&gt; (HDF) that Vivado uses to create a &lt;em&gt;Hardware Platform&lt;/em&gt;.
(Already provided for the PYNQ.)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;A &lt;em&gt;board support package&lt;/em&gt; (BSP) that contains the software for interacting with
the peripherals described in the HDF. There can be more than one BSP for a
hardware platform. For example, the base overlay has two BSPs: one for the
Pmod IOP and another for the Arduino IOP.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The BSP is linked with the application C/C++ code by the SDK compiler to create
an &lt;code class=&quot;highlighter-rouge&quot;&gt;.elf&lt;/code&gt; file which is then translated into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bin&lt;/code&gt; file that can
be loaded into the IOP program memory.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The IOP has an API for interfacing to its peripherals, its
reconfigurable switch, and the IOP-to-PS mailbox.
(The PS has a separate API for communicating with the IOP.)
The Arduino and Pmod IOPs are identical except for the reconfigurable switches
that connect their peripherals to the I/O pins of the
&lt;a href=&quot;https://github.com/Xilinx/PYNQ/tree/master/Pynq-Z1/vivado/ip/arduino_io_switch_1.0/drivers/arduino_io_switch_v1_0/src&quot;&gt;Arduino&lt;/a&gt;
or
&lt;a href=&quot;https://github.com/Xilinx/PYNQ/tree/master/Pynq-Z1/vivado/ip/pmod_io_switch_1.0/drivers/pmod_io_switch_v1_0/src&quot;&gt;Pmod&lt;/a&gt;
headers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The details of programming the IOP are explained &lt;a href=&quot;https://pynq.readthedocs.io/en/latest/11c_iop_using_peripherals.html&quot;&gt;here&lt;/a&gt;.
This covers the details of using the IOP &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; API to talk to the peripherals
and reconfigurable switch, and also covers the C and Python APIs for mailbox
communications.
(I won’t summarize this further. The link will provide a path to the details
needed to do IOP programming.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interrupt architecture:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;The IOPs use the Microblaze
&lt;a href=&quot;https://www.xilinx.com/products/intellectual-property/axi_intc.html&quot;&gt;AXI Interrupt Controller&lt;/a&gt;
internally.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The  base overlay also has an interrupt controller that can throw interrupts
from the IOPs over to the PS.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;One way the interrupts from the IOPs are handled in the PS is with Python’s
&lt;a href=&quot;https://docs.python.org/3.6/library/asyncio.html#module-asyncio&quot;&gt;asyncio package&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Creating Overlays:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Unlike a standard Zynq design, PYNQ’s PS section is already defined and the
PL design must match its settings (e.g., clock configuration).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Vivado exports a &lt;code class=&quot;highlighter-rouge&quot;&gt;tcl&lt;/code&gt; file describing the application mapped into the PL.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;tcl&lt;/code&gt; file is parsed by the PS using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Overlay&lt;/code&gt; class of the &lt;code class=&quot;highlighter-rouge&quot;&gt;pynq&lt;/code&gt; Python
package.
The result of the parsing is a list of addressable resources in the overlay
such as interrupt controllers, GPIO pins, IOP BRAMs, etc.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;pynq&lt;/code&gt; package provides the &lt;code class=&quot;highlighter-rouge&quot;&gt;MMIO&lt;/code&gt; class which is used to do memory-to-memory
transfers between the PS and the addressable elements of an overlay.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After reviewing the PYNQ docs, I see three levels for using the PYNQ, each level
requiring the skills of the ones above it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You can be given an overlay and then control it from Python as if it were a
peripheral attached to the PS. This requires understanding of the &lt;code class=&quot;highlighter-rouge&quot;&gt;pynq&lt;/code&gt;
Python package.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can be given an overlay but run your own programs on any 
IOPs it contains. This requires additional skills to:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;develop programs for the IOPs (Microblaze programming with the SDK or otherwise),&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;create an API in Python for talking to the IOPs from the PS, and&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;package, download and initiate the compiled programs to the IOPs.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Develop your own overlay for the PL using Vivado.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So my job now is to progress through these levels.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://xesscorp.github.io/pynqer/docs/_site/blog/reading-the-docs&quot;&gt;Reading the Docs&lt;/a&gt; was originally published by XESS Corp. at &lt;a href=&quot;https://xesscorp.github.io/pynqer/docs/_site&quot;&gt;PYNQer&lt;/a&gt; on April 22, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[PYNQ Setup]]></title>
  <link rel="alternate" type="text/html" href="https://xesscorp.github.io/pynqer/docs/_site/blog/pynq-setup"/>
  <id>https://xesscorp.github.io/pynqer/docs/_site/blog/pynq-setup</id>
  <published>2017-04-04T12:25:39-04:00</published>
  <updated>2017-04-04T12:25:39-04:00</updated>
  <author>
    <name>XESS Corp.</name>
    <uri>https://xesscorp.github.io/pynqer/docs/_site</uri>
    <email>pynqer@xess.com</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;Every blog like this starts off with a post about setting up the equipment.
This is that post.
Basically, I’m following the instructions given
&lt;a href=&quot;https://pynq.readthedocs.io/en/latest/1_getting_started.html&quot;&gt;here&lt;/a&gt;.
I won’t be saying anything new unless I manage to screw up.&lt;/p&gt;

&lt;p&gt;Every blog post has to have at least one picture, so here’s one
of the PYNQ-Z1 board I received from Patrick Lysaght of Xilinx.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/pynq-setup/PYNQ.jpg&quot; width=&quot;800&quot; alt=&quot;A PYNQ board.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Along with the board, I got a bunch of cables and an 8GB μSD card.
It probably contained a preloaded image with the OS and example files
but I didn’t even check.
I just downloaded the &lt;a href=&quot;https://files.digilent.com/Products/PYNQ/pynq_z1_image_2017_02_10.zip&quot;&gt;freshest image&lt;/a&gt;
and reflashed the card using &lt;a href=&quot;https://sourceforge.net/projects/win32diskimager/&quot;&gt;Win32 Disk Imager&lt;/a&gt;.
(Bonus points if you can see what I did wrong here.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/pynq-setup/reflash-card-wrong.png&quot; alt=&quot;Reflashing the PYNQ image.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I inserted the programmed μSD card into the PYNQ and set the &lt;code class=&quot;highlighter-rouge&quot;&gt;JP4&lt;/code&gt; jumper to
the &lt;code class=&quot;highlighter-rouge&quot;&gt;SD&lt;/code&gt; setting so the board would boot from it.&lt;/p&gt;

&lt;p&gt;Next, I connected an Ethernet cable directly from the PYNQ to my PC and 
&lt;a href=&quot;http://helpdeskgeek.com/windows-7/bridge-network-connections-in-windows-7/&quot;&gt;bridged the PC Ethernet adapter to the wireless adapter&lt;/a&gt;
that accesses the internet.&lt;/p&gt;

&lt;p&gt;Then I attached a micro-USB cable from my PC to the &lt;code class=&quot;highlighter-rouge&quot;&gt;PROG UART&lt;/code&gt; connector
on the PYNQ.&lt;/p&gt;

&lt;p&gt;Last but not least, I attached the supplied 12V / 3.0A power adapter
to the power jack on the PYNQ, set the shunt on the &lt;code class=&quot;highlighter-rouge&quot;&gt;JP5&lt;/code&gt; jumper to the &lt;code class=&quot;highlighter-rouge&quot;&gt;REG&lt;/code&gt;
position (the upper two pins), &lt;strong&gt;made sure the power switch was in the OFF position&lt;/strong&gt;,
and plugged the adapter into a wall socket.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/pynq-setup/pynq-connections.jpg&quot; width=&quot;800&quot; alt=&quot;Connections to the PYNQ.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The moment of truth had arrived: I pushed the power switch to the right and … nothing.
The red power LED came on, but the green &lt;code class=&quot;highlighter-rouge&quot;&gt;DONE&lt;/code&gt; LED (&lt;code class=&quot;highlighter-rouge&quot;&gt;LED12&lt;/code&gt;) midway between the
ZYNQ chip and the Ethernet connector stubbornly stayed off.
That indicated the ZYNQ was not getting configured.
Maybe reflashing that μSD card was a bad idea…&lt;/p&gt;

&lt;p&gt;It turned out it &lt;em&gt;was&lt;/em&gt; a bad idea.
After checking all the connections and powering the board on and off a few times,
I decided to check how I programmed the μSD card.
If you look at the Win32 Disk Imager screen above, you’ll see &lt;em&gt;I programmed
the card with the ZIP file instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.img&lt;/code&gt; file it contained!&lt;/em&gt;
Doh!
Unpacking the ZIP file and re-reflashing the card with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.img&lt;/code&gt; file fixed that error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/pynq-setup/reflash-card-right.png&quot; alt=&quot;Re-reflashing the PYNQ image.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After replacing the corrected μSD card in the PYNQ and applying power, the &lt;code class=&quot;highlighter-rouge&quot;&gt;DONE&lt;/code&gt; LED
comes on and (after a small delay) the &lt;code class=&quot;highlighter-rouge&quot;&gt;LD0 - LD5&lt;/code&gt; LEDs flash on-and-off eight or nine times.
That means the ZYNQ has configured correctly, booted the OS, and established communications
so it’s ready to talk to me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/pynq-setup/pynq-ready.png&quot; width=&quot;800&quot; alt=&quot;LED pattern for properly initialized PYNQ.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or maybe not:
when I tried to communicate with the board using a browser and either
&lt;code class=&quot;highlighter-rouge&quot;&gt;http://pynq:9090&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;http://192.168.2.99:9090&lt;/code&gt; as the address, I got
the dreaded message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/pynq-setup/unreachable-pynq.png&quot; width=&quot;800&quot; alt=&quot;The PYNQ was unreachable through the browser.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried a bunch of variations on the addresses and nothing worked.
Eventually it occurred to me that, since I was using a direct connection to the
board without an intervening router running DHCP, I needed to adjust the IP address of
my PC’s Ethernet port to match the PYNQ’s subnet (192.168.2):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/pynq-setup/setting-ethernet-IPV4.png&quot; alt=&quot;Setting the PC Ethernet port IPV4 address to match the PYNQ.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But even that didn’t fix the problem.
Finally, I removed the bridge between the PC’s Ethernet port and its wireless adapter.
With that, I was able to login using the hard-coded IPV4 address of the PYNQ:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/pynq-setup/hard-coded-login.png&quot; alt=&quot;Logging into the PYNQ using its hard-coded IPV4 address.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, the PYNQ couldn’t reach the internet in this configuration,
and I wanted to be able to easily download new software to it.
I went back and tried Internet Connection Sharing (ICS) but it complained
it needed to occupy the 192.168.0.1 address and that’s where my wireless router sits.
Therefore, I moved the router to the 192.168.1.x subnet and ICS still couldn’t
get packets from the PYNQ to the internet and back.
So I ditched ICS and tried to go old school and modify the routing tables
on my PC and wireless router (without much success).
Then I moved my entire network to the 192.168.2.x subnet to match up with the
subnet used by the PYNQ.
That actually worked, but it seemed like a pretty janky setup that might cause
other problems down the road.&lt;/p&gt;

&lt;p&gt;Admitting defeat, I dug out an old travel WiFi router, configured it as a client-mode
device, and used it to connect the PYNQ to my wireless network.
Then all my devices could see it and the PYNQ could get onto the internet.
I could also remove the direct Ethernet connection and pack everything
into a small space with short cords I’d be less likely to snag:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/pynq-setup/final-pynq-setup.png&quot; alt=&quot;PYNQ with WiFi connection, USB connection, and power adapter.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this arrangement, the PYNQ is accessible from anywhere within reach of my WiFi and I
can download things like new Python modules for it from the internet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xesscorp.github.io/pynqer/docs/_site/images/pynq-setup/pynq-downloading.png&quot; alt=&quot;PYNQ downloading a Python module.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now it’s on to the serious play of making the PYNQ do stuff.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://xesscorp.github.io/pynqer/docs/_site/blog/pynq-setup&quot;&gt;PYNQ Setup&lt;/a&gt; was originally published by XESS Corp. at &lt;a href=&quot;https://xesscorp.github.io/pynqer/docs/_site&quot;&gt;PYNQer&lt;/a&gt; on April 04, 2017.&lt;/p&gt;</content>
</entry>

</feed>
